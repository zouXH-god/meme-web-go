name: Build

on:
  push:
    tags:
      - v*  # 只有在推送标签时触发，例如 v1.0.0

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos: [ linux, windows, darwin ]
        goarch: [ amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.22

      - name: Install dependencies
        run: go mod tidy

      - name: Compile
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          OUTPUT_NAME=memeWeb
          if [ "${{ matrix.goos }}" == "windows" ]; then OUTPUT_NAME="${OUTPUT_NAME}.exe"; fi
          go build -o build/${GOOS}-${GOARCH}/${OUTPUT_NAME}

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: memeWeb-${{ matrix.goos }}-${{ matrix.goarch }}
          path: build/${{ matrix.goos }}-${{ matrix.goarch }}/memeWeb*
          if-no-files-found: warn

  createRelease:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build  # 依赖 build job

    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}  # 将 upload_url 设置为 Job 的输出

    steps:
      - name: Extract tag name
        id: extract_tag
        run: |
          echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.extract_tag.outputs.tag_name }}
          release_name: Release ${{ steps.extract_tag.outputs.tag_name }}
          body: Release of version ${{ steps.extract_tag.outputs.tag_name }}
          draft: false
          prerelease: false

  release:
    name: Upload Assets
    runs-on: ubuntu-latest
    needs: createRelease  # 依赖 createRelease job

    strategy:
      matrix:
        goos: [ linux, windows, darwin ]
        goarch: [ amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Show artifacts
        id: find-artifact
        run: |
          # 查找指定目录下的第一个文件
          ARTIFACT_PATH=$(find artifacts/memeWeb-${{ matrix.goos }}-${{ matrix.goarch }} -type f | head -n 1)
          echo "Found artifact: $ARTIFACT_PATH"
          # 将文件路径存储为输出变量，以便后续步骤使用
          echo "artifact_path=$ARTIFACT_PATH" >> $GITHUB_OUTPUT

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.createRelease.outputs.upload_url }}
          asset_path: ${{ steps.find-artifact.outputs.artifact_path }}
          asset_name: memeWeb-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}
          asset_content_type: application/octet-stream